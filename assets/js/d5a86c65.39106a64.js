"use strict";(self.webpackChunkzonedstorage_io=self.webpackChunkzonedstorage_io||[]).push([[8971],{2142:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"device-mapper/dm-linear","title":"dm-linear","description":"The dm-linear target maps a linear range of blocks of the device-mapper device","source":"@site/docs/device-mapper/dm-linear.md","sourceDirName":"device-mapper","slug":"/device-mapper/dm-linear","permalink":"/docs/device-mapper/dm-linear","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"dm-linear","title":"dm-linear","sidebar_label":"dm-linear"},"sidebar":"docs","previous":{"title":"Overview","permalink":"/docs/device-mapper"},"next":{"title":"dm-crypt","permalink":"/docs/device-mapper/dm-crypt"}}');var a=t(4848),o=t(8453);const r={id:"dm-linear",title:"dm-linear",sidebar_label:"dm-linear"},i="dm-linear",l={},d=[{value:"Zoned Block Device Restrictions",id:"zoned-block-device-restrictions",level:2},{value:"Example: Creating a Small Host Managed Disk",id:"example-creating-a-small-host-managed-disk",level:2},{value:"Example: Conventional Zones as a Regular Disk",id:"example-conventional-zones-as-a-regular-disk",level:2}];function c(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"dm-linear",children:"dm-linear"})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.em,{children:"dm-linear"})," target maps a linear range of blocks of the device-mapper device\nonto a linear range on a backend device. ",(0,a.jsx)(n.em,{children:"dm-linear"})," is the basic building\nblock of logical volume managers like ",(0,a.jsx)("a",{href:"http://www.sourceware.org/lvm2/",target:"_blank",children:(0,a.jsx)(n.em,{children:"LVM"})}),"."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.em,{children:"dm-linear"})," detailed documentation and some usage examples can be found in the\nkernel source code documentation file\n",(0,a.jsx)("a",{href:"https://github.com/torvalds/linux/blob/master/Documentation/admin-guide/device-mapper/linear.rst",target:"_blank",children:"Documentation/admin-guide/device-mapper/linear.rst"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"zoned-block-device-restrictions",children:"Zoned Block Device Restrictions"}),"\n",(0,a.jsxs)(n.p,{children:["When used with zoned block devices, the ",(0,a.jsx)(n.em,{children:"dm-linear"})," device that is created will\nalso be a zoned block device with the same zone size as the underlying device.\nSeveral conditions are enforced by the device-mapper core-management code\nduring the creation of a ",(0,a.jsx)(n.em,{children:"dm-linear"})," target device."]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"All backend devices used to map different ranges of the target device must\nhave the same zone model."}),"\n",(0,a.jsx)(n.li,{children:"If the backend devices are zoned block devices, all devices must have the same\nzone size."}),"\n",(0,a.jsx)(n.li,{children:"The mapped ranges must be zone aligned, that is, partial zone mapping is not\npossible."}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"example-creating-a-small-host-managed-disk",children:"Example: Creating a Small Host Managed Disk"}),"\n",(0,a.jsx)(n.p,{children:"This example illustrates how to create a small host-managed disk that uses zone\nranges from a large high capacity host-managed disk. The zone information of\nthe backend device used is shown below."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-plaintext",children:"# cat /sys/block/sdb/queue/zoned\nhost-managed\n# cat /sys/block/sdb/queue/chunk_sectors\n524288\n# blkzone report /dev/sdb\n  start: 0x000000000, len 0x080000, wptr 0x000000 reset:0 non-seq:0, zcond: 0(nw) [type: 1(CONVENTIONAL)]\n  start: 0x000080000, len 0x080000, wptr 0x000000 reset:0 non-seq:0, zcond: 0(nw) [type: 1(CONVENTIONAL)]\n  start: 0x000100000, len 0x080000, wptr 0x000000 reset:0 non-seq:0, zcond: 0(nw) [type: 1(CONVENTIONAL)]\n  start: 0x000180000, len 0x080000, wptr 0x000000 reset:0 non-seq:0, zcond: 0(nw) [type: 1(CONVENTIONAL)]\n  ...\n  start: 0x010580000, len 0x080000, wptr 0x000000 reset:0 non-seq:0, zcond: 0(nw) [type: 1(CONVENTIONAL)]\n  start: 0x010600000, len 0x080000, wptr 0x000000 reset:0 non-seq:0, zcond: 1(em) [type: 2(SEQ_WRITE_REQUIRED)]\n  start: 0x010680000, len 0x080000, wptr 0x000000 reset:0 non-seq:0, zcond: 1(em) [type: 2(SEQ_WRITE_REQUIRED)]\n  start: 0x010700000, len 0x080000, wptr 0x000000 reset:0 non-seq:0, zcond: 1(em) [type: 2(SEQ_WRITE_REQUIRED)]\n  ...\n  start: 0x6d2300000, len 0x080000, wptr 0x000000 reset:0 non-seq:0, zcond: 1(em) [type: 2(SEQ_WRITE_REQUIRED)]\n  start: 0x6d2380000, len 0x080000, wptr 0x000000 reset:0 non-seq:0, zcond: 1(em) [type: 2(SEQ_WRITE_REQUIRED)]\n"})}),"\n",(0,a.jsxs)(n.p,{children:["To create a ",(0,a.jsx)(n.em,{children:"dm-linear"}),' device named "small-sdb" that joins the first 5\nconventional zones of the backend device with the first 10 sequential zones,\nuse the following command.']}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-plaintext",children:'# echo "0 2621440 linear /dev/sdb 0\n2621440 5242880 linear /dev/sdb 274726912" | dmsetup create small-sdb\n'})}),"\n",(0,a.jsx)(n.p,{children:"The resulting device zone model is host-managed and has 15 zones, as shown\nbelow."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-plaintext",children:"# cat /sys/block/dm-0/queue/zoned\nhost-managed\n# cat /sys/block/dm-0/queue/chunk_sectors\n524288\n# blkzone report /dev/dm-0\n  start: 0x000000000, len 0x080000, wptr 0x000000 reset:0 non-seq:0, zcond: 0(nw) [type: 1(CONVENTIONAL)]\n  start: 0x000080000, len 0x080000, wptr 0x000000 reset:0 non-seq:0, zcond: 0(nw) [type: 1(CONVENTIONAL)]\n  start: 0x000100000, len 0x080000, wptr 0x000000 reset:0 non-seq:0, zcond: 0(nw) [type: 1(CONVENTIONAL)]\n  start: 0x000180000, len 0x080000, wptr 0x000000 reset:0 non-seq:0, zcond: 0(nw) [type: 1(CONVENTIONAL)]\n  start: 0x000200000, len 0x080000, wptr 0x000000 reset:0 non-seq:0, zcond: 0(nw) [type: 1(CONVENTIONAL)]\n  start: 0x000280000, len 0x080000, wptr 0x000000 reset:0 non-seq:0, zcond: 1(em) [type: 2(SEQ_WRITE_REQUIRED)]\n  start: 0x000300000, len 0x080000, wptr 0x000000 reset:0 non-seq:0, zcond: 1(em) [type: 2(SEQ_WRITE_REQUIRED)]\n  start: 0x000380000, len 0x080000, wptr 0x000000 reset:0 non-seq:0, zcond: 1(em) [type: 2(SEQ_WRITE_REQUIRED)]\n  start: 0x000400000, len 0x080000, wptr 0x000000 reset:0 non-seq:0, zcond: 1(em) [type: 2(SEQ_WRITE_REQUIRED)]\n  start: 0x000480000, len 0x080000, wptr 0x000000 reset:0 non-seq:0, zcond: 1(em) [type: 2(SEQ_WRITE_REQUIRED)]\n  start: 0x000500000, len 0x080000, wptr 0x000000 reset:0 non-seq:0, zcond: 1(em) [type: 2(SEQ_WRITE_REQUIRED)]\n  start: 0x000580000, len 0x080000, wptr 0x000000 reset:0 non-seq:0, zcond: 1(em) [type: 2(SEQ_WRITE_REQUIRED)]\n  start: 0x000600000, len 0x080000, wptr 0x000000 reset:0 non-seq:0, zcond: 1(em) [type: 2(SEQ_WRITE_REQUIRED)]\n  start: 0x000680000, len 0x080000, wptr 0x000000 reset:0 non-seq:0, zcond: 1(em) [type: 2(SEQ_WRITE_REQUIRED)]\n  start: 0x000700000, len 0x080000, wptr 0x000000 reset:0 non-seq:0, zcond: 1(em) [type: 2(SEQ_WRITE_REQUIRED)]\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The following shows a script that facilitates the creation of ",(0,a.jsx)(n.em,{children:"dm-linear"}),"\ndevices using zone ranges from a single zoned block device. Such small zoned\nblock devices can be used to test application limits (e.g. Disk full\nconditions)."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\n\nif [ $# -ne 3 ]; then\n\techo "Usage: $0 <disk> <num conv zones> <num seq zones>"\n\texit 1\nfi\n\ndisk="$1"\nnrconv=$2\nnrseq=$3\ndname="$(basename ${disk})"\n\n# Linear table entries: "start length linear device offset"\n# start: starting block in virtual device\n# length: length of this segment\n# device: block device, referenced by the device name or by major:minor\n# offset: starting offset of the mapping on the device\n\nconvlen=$(( nrconv * 524288 ))\nseqlen=$(( nrseq * 524288 ))\n\nif [ ${convlen} -eq 0 ] && [ ${seqlen} -eq 0 ]; then\n\techo "0 zones..."\n\texit 1\nfi\n\nseqofst=$(blkzone report "$1" | grep "SEQ_WRITE_REQUIRED" |\n\t  head -n1 | cut -f1 -d\',\' | cut -f2 -d\':\' | xargs printf "%d\\n")\n\nif [ ${convlen} -gt ${seqofst} ]; then\n\tnrconv=$(( seqofst / 524288 ))\n\techo "Too many conventional zones requested: truncating to $nrconv"\n\tconvlen=${seqofst}\nfi\n\nif [ ${convlen} -eq 0 ]; then\n\techo "0 ${seqlen} linear ${disk} ${seqofst}" | dmsetup create small-${dname}\nelif [ ${seqlen} -eq 0 ]; then\n\techo "0 ${convlen} linear ${disk} 0" | dmsetup create small-${dname}\nelse\n\techo "0 ${convlen} linear ${disk} 0\n\t${convlen} ${seqlen} linear ${disk} ${seqofst}" | dmsetup create small-${dname}\nfi\n'})}),"\n",(0,a.jsx)(n.h2,{id:"example-conventional-zones-as-a-regular-disk",children:"Example: Conventional Zones as a Regular Disk"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.em,{children:"dm-linear"})," can also be used to aggregate a zoned block device's conventional\nzones together into a target device that will be usable as a regular disk\n(conventional zones can be randomly written). Reusing the previous example\nbackend disk, 524 conventional zones of 524288 sectors (512 B unit) are\navailable. The following command creates a ",(0,a.jsx)(n.em,{children:"dm-linear"})," device joining all\nconventional zones together."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-plaintext",children:'# echo "0 274726912 linear /dev/sdb 0" | dmsetup create small-sdb\n'})}),"\n",(0,a.jsx)(n.p,{children:"The target device is again a host-managed disk but contains only conventional\nzones."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-plaintext",children:"# cat /sys/block/dm-0/queue/zoned\nhost-managed\n# cat /sys/block/dm-0/queue/chunk_sectors\n524288\n# blkzone report /dev/dm-0\n  start: 0x000000000, len 0x080000, wptr 0x000000 reset:0 non-seq:0, zcond: 0(nw) [type: 1(CONVENTIONAL)]\n  start: 0x000080000, len 0x080000, wptr 0x000000 reset:0 non-seq:0, zcond: 0(nw) [type: 1(CONVENTIONAL)]\n  start: 0x000100000, len 0x080000, wptr 0x000000 reset:0 non-seq:0, zcond: 0(nw) [type: 1(CONVENTIONAL)]\n  start: 0x000180000, len 0x080000, wptr 0x000000 reset:0 non-seq:0, zcond: 0(nw) [type: 1(CONVENTIONAL)]\n  ...\n  start: 0x010500000, len 0x080000, wptr 0x000000 reset:0 non-seq:0, zcond: 0(nw) [type: 1(CONVENTIONAL)]\n  start: 0x010580000, len 0x080000, wptr 0x000000 reset:0 non-seq:0, zcond: 0(nw) [type: 1(CONVENTIONAL)]\n"})}),"\n",(0,a.jsx)(n.p,{children:"Because this zoned block device is composed entirely of conventional zones, all\nsectors are randomly writable and can therefore be used directly with any file\nsystem."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-plaintext",children:"# mkfs.ext4 /dev/dm-0\nmke2fs 1.44.6 (5-Mar-2019)\nCreating filesystem with 34340864 4k blocks and 8585216 inodes\nFilesystem UUID: 3957429a-5dab-4b30-9797-f9736036a47b\nSuperblock backups stored on blocks:\n\t32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208,\n\t4096000, 7962624, 11239424, 20480000, 23887872\n\nAllocating group tables: done\nWriting inode tables: done\nCreating journal (262144 blocks): done\nWriting superblocks and filesystem accounting information: done\n\n# mount /dev/dm-0 /mnt\n# ls -l /mnt\ntotal 16\ndrwx------ 2 root root 16384 May 21 17:03 lost+found\n"})}),"\n",(0,a.jsx)(n.p,{children:"Applications that need frequent random updates to their metadata can use such\nsetups to facilitate the implementation of a complex metadata structure. The\nremaining sequential zones of the disk can be used directly by the application\nto store data."})]})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>i});var s=t(6540);const a={},o=s.createContext(a);function r(e){const n=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);
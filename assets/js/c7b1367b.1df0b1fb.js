"use strict";(self.webpackChunkzonedstorage_io=self.webpackChunkzonedstorage_io||[]).push([[1992],{212:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var s=t(7624),o=t(4552);const i={id:"zbd-api",title:"Zoned Block Device User Interface",sidebar_label:"Zoned Block Device User Interface"},r="Zoned Block Device User Interface",l={id:"linux/zbd-api",title:"Zoned Block Device User Interface",description:"User applications can use two types of interfaces to access the zone",source:"@site/docs/linux/zbd-api.md",sourceDirName:"linux",slug:"/linux/zbd-api",permalink:"/docs/linux/zbd-api",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"zbd-api",title:"Zoned Block Device User Interface",sidebar_label:"Zoned Block Device User Interface"},sidebar:"docs",previous:{title:"Kernel Configuration",permalink:"/docs/linux/config"},next:{title:"Write Ordering Control",permalink:"/docs/linux/sched"}},a={},c=[{value:"Sysfs Interface",id:"sysfs-interface",level:2},{value:"Device Zoned Model",id:"device-zoned-model",level:3},{value:"Zone Size",id:"zone-size",level:3},{value:"Number of Zones",id:"number-of-zones",level:3},{value:"Zone Resources",id:"zone-resources",level:3},{value:"<em>ioctl()</em> Application Programming Interface",id:"ioctl-application-programming-interface",level:2},{value:"Zone Information Data Structures",id:"zone-information-data-structures",level:3},{value:"Zone Type",id:"zone-type",level:3},{value:"Zone Condition",id:"zone-condition",level:3},{value:"<em>ioctl()</em> Commands",id:"ioctl-commands",level:2},{value:"Obtaining Zone Information",id:"obtaining-zone-information",level:3},{value:"Resetting a Zone Write Pointer",id:"resetting-a-zone-write-pointer",level:3},{value:"Opening, Closing and Finishing Zones",id:"opening-closing-and-finishing-zones",level:3},{value:"Zone Size and Number of Zones",id:"zone-size-and-number-of-zones",level:3}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,o.M)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"zoned-block-device-user-interface",children:"Zoned Block Device User Interface"}),"\n",(0,s.jsx)(n.p,{children:"User applications can use two types of interfaces to access the zone\ninformation of zoned block devices and to manage the zones of zoned block\ndevices. These two types of interfaces are:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"sysfs"})," attribute files, which are accessible either directly from\napplications as regular files or from scripted languages (shell scripts,\npython, etc)."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"ioctl()"})," system calls, which are suitable for use from C programs or other\nprogramming languages that have an equivalent system-call binding."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.em,{children:"sysfs"})," files and ",(0,s.jsx)(n.em,{children:"ioctl()"})," commands that are available to applications\nhave evolved since the introduction of zoned block device support in Kernel\n4.10. The availability of files and commands per kernel version is detailed in\nthe following sections."]}),"\n",(0,s.jsx)(n.h2,{id:"sysfs-interface",children:"Sysfs Interface"}),"\n",(0,s.jsxs)(n.p,{children:["Programs that use scripting languages (e.g. bash scripts) can access zoned\ndevice information through ",(0,s.jsx)(n.em,{children:"sysfs"})," attribute files. These attribute files\nare shown in the following table."]}),"\n",(0,s.jsx)("center",{children:(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{style:{textAlign:"left"},children:"File"}),(0,s.jsx)(n.th,{style:{textAlign:"left"},children:"Kernel version"}),(0,s.jsx)(n.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsxs)(n.td,{style:{textAlign:"left"},children:["/sys/block/",(0,s.jsx)(n.em,{children:"dev name"}),"/queue/zoned"]}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"4.10.0"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Device zoned model"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsxs)(n.td,{style:{textAlign:"left"},children:["/sys/block/",(0,s.jsx)(n.em,{children:"dev name"}),"/queue/chunk_sectors"]}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"4.10.0"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Device zone size"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsxs)(n.td,{style:{textAlign:"left"},children:["/sys/block/",(0,s.jsx)(n.em,{children:"dev name"}),"/queue/nr_zones"]}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"4.20.0"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Total number of zones"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsxs)(n.td,{style:{textAlign:"left"},children:["/sys/block/",(0,s.jsx)(n.em,{children:"dev name"}),"/queue/zone_append_max_bytes"]}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"5.8.0"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Maximum size in bytes of a zone append write operation"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsxs)(n.td,{style:{textAlign:"left"},children:["/sys/block/",(0,s.jsx)(n.em,{children:"dev name"}),"/queue/max_open_zones"]}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"5.9.0"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Maximum number of open zones"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsxs)(n.td,{style:{textAlign:"left"},children:["/sys/block/",(0,s.jsx)(n.em,{children:"dev name"}),"/queue/max_active_zones"]}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"5.9.0"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Maximum number of active zones"})]})]})]})}),"\n",(0,s.jsx)(n.h3,{id:"device-zoned-model",children:"Device Zoned Model"}),"\n",(0,s.jsxs)(n.p,{children:["The zone model of a zoned device can be discovered by using the ",(0,s.jsx)(n.code,{children:"zoned"})," device\nqueue attribute file. For example: for a zoned block device named ",(0,s.jsx)(n.em,{children:"sdb"}),", the\nfollowing shell command displays the device zoned model."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-plaintext",children:"# cat /sys/block/sdb/queue/zoned\nhost-managed\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The possible values of the ",(0,s.jsx)(n.em,{children:"zoned"})," attribute file are shown in the table below."]}),"\n",(0,s.jsx)("center",{children:(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{style:{textAlign:"left"},children:"Value"}),(0,s.jsx)(n.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"none"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Regular block device, including drive-managed SMR disks"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"host-aware"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Host-aware device model"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"host-managed"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Host-managed device model"})]})]})]})}),"\n",(0,s.jsx)(n.h3,{id:"zone-size",children:"Zone Size"}),"\n",(0,s.jsxs)(n.p,{children:["The device zone size can be read from the ",(0,s.jsx)(n.em,{children:"sysfs"})," queue attribute file that is\nnamed ",(0,s.jsx)(n.code,{children:"chunk_sectors"}),". For a device named ",(0,s.jsx)(n.em,{children:"sdb"})," (the same device as in the\nprevious example), the following command gives the device zone size."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-plaintext",children:"# cat /sys/block/sdb/queue/chunk_sectors\n524288\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The value is displayed as a number of 512B sectors, regardless of the actual\nlogical and physical block size of the device. In this example, the device zone\nsize is ",(0,s.jsx)(n.em,{children:"524288 x 512 = 256 MiB"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"number-of-zones",children:"Number of Zones"}),"\n",(0,s.jsxs)(n.p,{children:["The sysfs queue attribute file ",(0,s.jsx)(n.em,{children:"nr_zones"})," was introduced in Linux kernel version\n4.20.0, and is available to obtain the total number of zones of a zoned device."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-plaintext",children:"# cat /sys/block/sdb/queue/nr_zones\n55880\n"})}),"\n",(0,s.jsx)(n.p,{children:"This attribute value is always 0 for a regular block device."}),"\n",(0,s.jsx)(n.h3,{id:"zone-resources",children:"Zone Resources"}),"\n",(0,s.jsxs)(n.p,{children:["The device zone resources can be read from the ",(0,s.jsx)(n.em,{children:"sysfs"})," queue attribute files\nthat are named ",(0,s.jsx)(n.code,{children:"max_open_zones"})," and ",(0,s.jsx)(n.code,{children:"max_active_zones"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["For an SAS or SATA host-managed SMR disk named ",(0,s.jsx)(n.em,{children:"sdb"})," (the same device as in the\nprevious example), the following command gives the maximum number of zones that\ncan be in the implicit or explicit open state."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-plaintext",children:"# cat /sys/block/sdb/queue/max_open_zones\n128\n"})}),"\n",(0,s.jsx)(n.p,{children:"The value is displayed as a number of zones, with 0 indicating that the device\ndoes not have any limit on the maximum number of zones that can be open."}),"\n",(0,s.jsx)(n.p,{children:"For the same device, the following command gives the maximum number of zones\nthat can be active (open or closed state)."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-plaintext",children:"# cat /sys/block/sdb/queue/max_active_zones\n0\n"})}),"\n",(0,s.jsx)(n.p,{children:"The value is displayed as a number of zones, with 0 indicating that the device\ndoes not have any limit on the maximum number of active zones. For SMR\nhard-disks, this limit is always 0."}),"\n",(0,s.jsx)(n.p,{children:"The values that are advertised by these attributes vary, depending on the\ndevice. The following shows an example with an NVMe ZNS device."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-plaintext",children:"# cat /sys/block/nvme0n1/queue/max_open_zones\n14\n# cat /sys/block/nvme0n1/queue/max_active_zones\n14\n"})}),"\n",(0,s.jsxs)(n.p,{children:["When ",(0,s.jsx)(n.a,{href:"/docs/getting-started/zbd-emulation",children:"emulating a zoned device"})," using\n",(0,s.jsx)(n.em,{children:"null_blk"}),", ",(0,s.jsx)(n.em,{children:"QEMU"}),", or ",(0,s.jsx)(n.em,{children:"tcmu-runner"}),", the values of these attributes can be\nmanually configured to emulate different physical device characteristics."]}),"\n",(0,s.jsxs)(n.h2,{id:"ioctl-application-programming-interface",children:[(0,s.jsx)(n.em,{children:"ioctl()"})," Application Programming Interface"]}),"\n",(0,s.jsxs)(n.p,{children:["The C header file ",(0,s.jsx)(n.code,{children:"/usr/include/linux/blkzoned.h"})," contains macro definitions and\ndata structure definitions that allow application developers to obtain\ninformation about zoned block devices and to manage the zones of the devices."]}),"\n",(0,s.jsx)(n.h3,{id:"zone-information-data-structures",children:"Zone Information Data Structures"}),"\n",(0,s.jsxs)(n.p,{children:["The data structure ",(0,s.jsx)(n.code,{children:"struct blk_zone"})," defines a zone-descriptor structure that\ncontains a complete description of a zone: this includes the zone's location on\nthe device, the zone type, its condition (state), and the position of the zone\nwrite pointer (for sequential zones). For kernels Up to kernel version 5.8, this\ndata structure is as shown below."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"/**\n * struct blk_zone - Zone descriptor for BLKREPORTZONE ioctl.\n *\n * @start: Zone start in 512 B sector units\n * @len: Zone length in 512 B sector units\n * @wp: Zone write pointer location in 512 B sector units\n * @type: see enum blk_zone_type for possible values\n * @cond: see enum blk_zone_cond for possible values\n * @non_seq: Flag indicating that the zone is using non-sequential resources\n *           (for host-aware zoned block devices only).\n * @reset: Flag indicating that a zone reset is recommended.\n * @reserved: Padding to 64 B to match the ZBC/ZAC defined zone descriptor size.\n *\n * start, len, capacity and wp use the regular 512 B sector unit, regardless\n * of the device logical block size. The overall structure size is 64 B to\n * match the size of the ZBC-, ZAC- and ZNS-defined zone descriptor and to \n * allow support for future additional zone information.\n */\nstruct blk_zone {\n        __u64   start;          /* Zone start sector */\n        __u64   len;            /* Zone length in number of sectors */\n        __u64   wp;             /* Zone write pointer position */\n        __u8    type;           /* Zone type */\n        __u8    cond;           /* Zone condition */\n        __u8    non_seq;        /* Non-sequential write resources active */\n        __u8    reset;          /* Reset write pointer recommended */\n        __u8    reserved[36];\n};\n"})}),"\n",(0,s.jsx)(n.p,{children:'As indicated in the comments on this data structure definition, the unit that\nis used to indicate (1) the zone start position, (2) the zone\'s size and (3) the\nwrite pointer position is "512B sector size". This holds true regardless of the\nactual logical block size of the device. Even for a device with a 4KB logical\nsector, the above zone descriptor fields use a 512-byte sector size unit.'}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.em,{children:"capacity"})," field was added to ",(0,s.jsx)(n.em,{children:"struct blk_zone"})," in kernel version 5.9. In\nkernel versions 5.9 and later (which contain the ",(0,s.jsx)(n.em,{children:"capacity"})," field), the data\nstructure is as follows."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"/**\n * struct blk_zone - Zone descriptor for BLKREPORTZONE ioctl.\n *\n * @start: Zone start in 512 B sector units\n * @len: Zone length in 512 B sector units\n * @wp: Zone write pointer location in 512 B sector units\n * @type: see enum blk_zone_type for possible values\n * @cond: see enum blk_zone_cond for possible values\n * @non_seq: Flag indicating that the zone is using non-sequential resources\n *           (for host-aware zoned block devices only).\n * @reset: Flag indicating that a zone reset is recommended.\n * @resv: Padding for 8B alignment.\n * @capacity: Zone usable capacity in 512 B sector units\n * @reserved: Padding to 64 B to match the ZBC, ZAC and ZNS defined zone\n *            descriptor size.\n *\n * start, len, capacity and wp use the regular 512 B sector unit, regardless\n * of the device logical block size. The overall structure size is 64 B to\n * match the ZBC, ZAC and ZNS defined zone descriptor and allow support for\n * future additional zone information.\n */\nstruct blk_zone {\n        __u64   start;          /* Zone start sector */\n        __u64   len;            /* Zone length in number of sectors */\n        __u64   wp;             /* Zone write pointer position */\n        __u8    type;           /* Zone type */\n        __u8    cond;           /* Zone condition */\n        __u8    non_seq;        /* Non-sequential write resources active */\n        __u8    reset;          /* Reset write pointer recommended */\n        __u8    resv[4];\n        __u64   capacity;       /* Zone capacity in number of sectors */\n        __u8    reserved[24];\n};\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.em,{children:"capacity"})," field indicates the usable zone capacity of a zone in units of\n512B sectors. The presence, or validity, of this field within the structure is\nindicated using a zone report flag.\nSee ",(0,s.jsx)(n.a,{href:"#obtaining-zone-information",children:(0,s.jsx)(n.em,{children:"Obtaining Zone Information"})})," below for\ndetails."]}),"\n",(0,s.jsx)(n.h3,{id:"zone-type",children:"Zone Type"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"type"})," field of a zone descriptor can have only one of the values defined by\nthe enumeration ",(0,s.jsx)(n.code,{children:"enum blk_zone_type"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"/**\n * enum blk_zone_type - Types of zones allowed in a zoned device.\n *\n * @BLK_ZONE_TYPE_CONVENTIONAL: The zone has no write pointer and can be writen\n *                              randomly. Zone reset has no effect on the zone.\n * @BLK_ZONE_TYPE_SEQWRITE_REQ: The zone must be written sequentially\n * @BLK_ZONE_TYPE_SEQWRITE_PREF: The zone can be written non-sequentially\n *\n * Any other value not defined is reserved and must be considered as invalid.\n */\nenum blk_zone_type {\n        BLK_ZONE_TYPE_CONVENTIONAL      = 0x1,\n        BLK_ZONE_TYPE_SEQWRITE_REQ      = 0x2,\n        BLK_ZONE_TYPE_SEQWRITE_PREF     = 0x3,\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"zone-condition",children:"Zone Condition"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"cond"})," field of the ",(0,s.jsx)(n.code,{children:"struct blkzone"})," data structure defines the current\ncondition of a zone. The possible condition (state) values of this field are\ndefined by the ",(0,s.jsx)(n.code,{children:"blk_zone_cond"})," enumeration."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"/**\n * enum blk_zone_cond - Condition [state] of a zone in a zoned device.\n *\n * @BLK_ZONE_COND_NOT_WP: The zone has no write pointer, it is conventional.\n * @BLK_ZONE_COND_EMPTY: The zone is empty.\n * @BLK_ZONE_COND_IMP_OPEN: The zone is open, but not explicitly opened.\n * @BLK_ZONE_COND_EXP_OPEN: The zones was explicitly opened by an\n *                          OPEN ZONE command.\n * @BLK_ZONE_COND_CLOSED: The zone was [explicitly] closed after writing.\n * @BLK_ZONE_COND_FULL: The zone is marked as full, possibly by a zone\n *                      FINISH ZONE command.\n * @BLK_ZONE_COND_READONLY: The zone is read-only.\n * @BLK_ZONE_COND_OFFLINE: The zone is offline (sectors cannot be read/written).\n *\n * The Zone Condition state machine in the ZBC/ZAC standards maps the above\n * deinitions as:\n *   - ZC1: Empty         | BLK_ZONE_EMPTY\n *   - ZC2: Implicit Open | BLK_ZONE_COND_IMP_OPEN\n *   - ZC3: Explicit Open | BLK_ZONE_COND_EXP_OPEN\n *   - ZC4: Closed        | BLK_ZONE_CLOSED\n *   - ZC5: Full          | BLK_ZONE_FULL\n *   - ZC6: Read Only     | BLK_ZONE_READONLY\n *   - ZC7: Offline       | BLK_ZONE_OFFLINE\n *\n * Conditions 0x5 to 0xC are reserved by the current ZBC/ZAC spec and should\n * be considered invalid.\n */\nenum blk_zone_cond {\n        BLK_ZONE_COND_NOT_WP    = 0x0,\n        BLK_ZONE_COND_EMPTY     = 0x1,\n        BLK_ZONE_COND_IMP_OPEN  = 0x2,\n        BLK_ZONE_COND_EXP_OPEN  = 0x3,\n        BLK_ZONE_COND_CLOSED    = 0x4,\n        BLK_ZONE_COND_READONLY  = 0xD,\n        BLK_ZONE_COND_FULL      = 0xE,\n        BLK_ZONE_COND_OFFLINE   = 0xF,\n};\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Under a device's normal operation, some of these conditions cannot result\ndirectly from host-initiated operations. These conditions are\n",(0,s.jsx)(n.code,{children:"BLK_ZONE_COND_OFFLINE"})," and ",(0,s.jsx)(n.code,{children:"BLK_ZONE_COND_READONLY"}),". They can be set only by\nthe device itself, and are set to indicate zones with capabilities that have\nbeen limited by a hardware defect."]}),"\n",(0,s.jsxs)(n.p,{children:["User operations (either write operations or zone management commands) can\nresult in transitions to other conditions. Applications that use the kernel\n",(0,s.jsx)(n.em,{children:"ioctl()"})," interface can issue zone managment commands. See ",(0,s.jsxs)(n.a,{href:"#ioctl-commands",children:[(0,s.jsx)(n.em,{children:"ioctl()"}),"\nCommands"]})," for more information about this."]}),"\n",(0,s.jsx)(n.p,{children:"The SCSI Zoned Block Command specification (ZBC), the ATA Zoned Device ATA\nCommand Set specification (ZAC) and the NVM Express Zoned Namespace Command\nSet specification (ZNS) define a zone condition state machine that governs the\npossible transitions of a zone from one condition to another depending on the\ncommands executed."}),"\n",(0,s.jsxs)(n.h2,{id:"ioctl-commands",children:[(0,s.jsx)(n.em,{children:"ioctl()"})," Commands"]}),"\n",(0,s.jsxs)(n.p,{children:["Several ",(0,s.jsx)(n.em,{children:"ioctl()"})," commands are defined to manipulate and obtain information and\nmanipulate the zones of a zoned block device. All supported commands are shown\nbelow."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"/**\n * Zoned block device ioctl's:\n *\n * @BLKREPORTZONE: Get zone information. Takes a zone report as argument.\n *                 The zone report will start from the zone containing the\n *                 sector specified in the report request structure.\n * @BLKRESETZONE: Reset the write pointer of the zones in the specified\n *                sector range. The sector range must be zone aligned.\n * @BLKGETZONESZ: Get the device zone size in number of 512 B sectors.\n * @BLKGETNRZONES: Get the total number of zones of the device.\n * @BLKOPENZONE: Open the zones in the specified sector range.\n *               The 512 B sector range must be zone aligned.\n * @BLKCLOSEZONE: Close the zones in the specified sector range.\n *                The 512 B sector range must be zone aligned.\n * @BLKFINISHZONE: Mark the zones as full in the specified sector range.\n *                 The 512 B sector range must be zone aligned.\n */\n#define BLKREPORTZONE   _IOWR(0x12, 130, struct blk_zone_report)\n#define BLKRESETZONE    _IOW(0x12, 131, struct blk_zone_range)\n#define BLKGETZONESZ    _IOR(0x12, 132, __u32)\n#define BLKGETNRZONES   _IOR(0x12, 133, __u32)\n#define BLKOPENZONE     _IOW(0x12, 134, struct blk_zone_range)\n#define BLKCLOSEZONE    _IOW(0x12, 135, struct blk_zone_range)\n#define BLKFINISHZONE   _IOW(0x12, 136, struct blk_zone_range)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Not all commands are available on all kernel versions. The following table shows\nwhich kernel version introduced each command."}),"\n",(0,s.jsx)("center",{children:(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{style:{textAlign:"left"},children:"Command"}),(0,s.jsx)(n.th,{style:{textAlign:"left"},children:"Kernel version"}),(0,s.jsx)(n.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"BLKREPORTZONE"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"4.10.0"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Get zone information"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"BLKRESETZONE"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"4.10.0"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Reset a zone write pointer"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"BLKGETZONESZ"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"4.20.0"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Get a device zone size"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"BLKGETNRZONES"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"4.20.0"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Get the total number of zones of a device"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"BLKOPENZONE"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"5.5.0"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Explicitly open a zone"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"BLKCLOSEZONE"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"5.5.0"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Close a zone"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"BLKFINISHZONE"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"5.5.0"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Finish a zone"})]})]})]})}),"\n",(0,s.jsx)(n.h3,{id:"obtaining-zone-information",children:"Obtaining Zone Information"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.em,{children:"BLKREPORTZONE"})," command allows an application to obtain a device's zone\ninformation in the form of an array of zone descriptors. The data argument\nthat is passed to ",(0,s.jsx)(n.code,{children:"ioctl()"})," must be the address of a memory area that is large\nenough to store one ",(0,s.jsx)(n.code,{children:"struct blk_zone_report"})," header structure, followed by an\narray of zone descriptors."]}),"\n",(0,s.jsxs)(n.p,{children:["The zone report header structure ",(0,s.jsx)(n.code,{children:"blk_zone_report"})," is as shown below."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"/**\n * struct blk_zone_report - BLKREPORTZONE ioctl request/reply\n *\n * @sector: starting sector of report\n * @nr_zones: IN maximum / OUT actual\n * @reserved: padding to 16 byte alignment\n * @zones: Space to hold @nr_zones @zones entries on reply.\n *\n * The array of at most @nr_zones must follow this structure in memory.\n */\nstruct blk_zone_report {\n\t__u64\t\tsector;\n\t__u32\t\tnr_zones;\n\t__u8\t\treserved[4];\n\tstruct blk_zone zones[0];\n};\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The header indicates the 512-byte sector from which the report should start as\nwell as the number of zone descriptors in the array following the header. A\ntypical use of the ",(0,s.jsx)(n.code,{children:"BLKREPORTZONE"})," command to obtain information on all the\nzones of a device is as shown below."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:'#include <stdlib.h>\n#include <sys/ioctl.h>\n#include <linux/blkzoned.h>\n\nunsigned long long start_sector = 0;\nstruct blk_zone_report *hdr;\nsize_t hdr_len;\nint nr_zones = 256;\n\nhdr_len = sizeof(struct blk_zone_report) + nr_zones * sizeof(struct blkzone);\nhdr = malloc(hdr_len);\nif (!hdr)\n\treturn -1;\n\nwhile (1) {\n\thdr->sector = start_sector;\n\thdr->nr_zones = nr_zones;\n\n\tret = ioctl(fd, BLKREPORTZONE, hdr);\n\tif (ret)\n\t\tgoto error;\n\n\tif (!hdr->nr_zones) {\n\t\t/* Done */\n\t\tbreak;\n\t}\n\n\tprintf("Got %u zone descriptors\\n", hdr->nr_zones);\n\t...\n\n\t/* The next report must start after the last zone reported */\n\tstart_sector = hdr->zones[hdr->nr_zones - 1].start +\n\t\t       hdr->zones[hdr->nr_zones - 1].len;\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The number of zone descriptors obtained is returned to the user in the\n",(0,s.jsx)(n.code,{children:"nr_zones"})," field of the report header structure ",(0,s.jsx)(n.code,{children:"blk_zone_report"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["When zone capacity support for NVMe Zoned Namepsaces was introduced in kernel\nversion 5.9, zone descriptors gained the ",(0,s.jsx)(n.code,{children:"capacity"})," field. The presence of this\nfield is indicated by the new ",(0,s.jsx)(n.code,{children:"flag"})," field added to ",(0,s.jsx)(n.code,{children:"struct blk_zone_report"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"/**\n * enum blk_zone_report_flags - Feature flags of reported zone descriptors.\n *\n * @BLK_ZONE_REP_CAPACITY: Zone descriptor has capacity field.\n */\nenum blk_zone_report_flags {\n        BLK_ZONE_REP_CAPACITY   = (1 << 0),\n};\n\n/**\n * struct blk_zone_report - BLKREPORTZONE ioctl request/reply\n *\n * @sector: starting sector of report\n * @nr_zones: IN maximum / OUT actual\n * @flags: one or more flags as defined by enum blk_zone_report_flags.\n * @zones: Space to hold @nr_zones @zones entries on reply.\n *\n * The array of at most @nr_zones must follow this structure in memory.\n */\nstruct blk_zone_report {\n\t__u64\t\tsector;\n\t__u32\t\tnr_zones;\n\t__u32\t\tflags;\n\tstruct blk_zone zones[0];\n};\n"})}),"\n",(0,s.jsxs)(n.p,{children:["If the ",(0,s.jsx)(n.code,{children:"flags"})," field of ",(0,s.jsx)(n.code,{children:"struct blk_zone_report"})," has the flag\n",(0,s.jsx)(n.code,{children:"BLK_ZONE_REP_CAPACITY"})," set, then the zone descriptor's structure will have a\nvalid value set in the ",(0,s.jsx)(n.code,{children:"capacity"})," field of ",(0,s.jsx)(n.code,{children:"sturct blk_zone"}),". Otherwise, this\nfield will show a value of 0 and can be ignored."]}),"\n",(0,s.jsxs)(n.p,{children:["The example code below, extracted from the code of the\n",(0,s.jsx)(n.a,{href:"/docs/tools/libzbd",children:(0,s.jsx)(n.em,{children:"libzbd"})})," library, illustrates how applications can\nimplement backward-compatible support for zone capacity information by using the\nautotools build environment."]}),"\n",(0,s.jsxs)(n.p,{children:["First, support for the zone capacity information in a zone report can be\ndetected as follows using the kernel user API header file ",(0,s.jsx)(n.em,{children:"linux/blkzoned.h"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-plaintext",children:"# less configure.ac\n...\nAC_CHECK_HEADER(linux/blkzoned.h, [],\n                [AC_MSG_ERROR([Couldn't find linux/blkzoned.h. Kernel too old ?])],\n                [[#include <linux/blkzoned.h>]])\n\nAC_CHECK_MEMBER([struct blk_zone.capacity],\n                [AC_DEFINE(HAVE_BLK_ZONE_REP_V2, [1], [report zones includes zone capacity])],\n                [], [[#include <linux/blkzoned.h>]])\n"})}),"\n",(0,s.jsxs)(n.p,{children:["For kernels reporting the capacity of zones, the macro ",(0,s.jsx)(n.em,{children:"HAVE_BLK_ZONE_REP_V2"}),"\nwill be defined. This macro can then be used as follows."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"/*\n * Handle kernel zone capacity support\n */\n#ifndef HAVE_BLK_ZONE_REP_V2\n#define BLK_ZONE_REP_CAPACITY   (1 << 0)\n\nstruct blk_zone_v2 {\n        __u64   start;          /* Zone start sector */\n        __u64   len;            /* Zone length in number of sectors */\n        __u64   wp;             /* Zone write pointer position */\n        __u8    type;           /* Zone type */\n        __u8    cond;           /* Zone condition */\n        __u8    non_seq;        /* Non-sequential write resources active */\n        __u8    reset;          /* Reset write pointer recommended */\n        __u8    resv[4];\n        __u64   capacity;       /* Zone capacity in number of sectors */\n        __u8    reserved[24];\n};\n#define blk_zone blk_zone_v2\n\nstruct blk_zone_report_v2 {\n        __u64   sector;\n        __u32   nr_zones;\n        __u32   flags;\n\tstruct blk_zone zones[0];\n};\n#define blk_zone_report blk_zone_report_v2\n#endif /* HAVE_BLK_ZONE_REP_V2 */\n...\n"})}),"\n",(0,s.jsxs)(n.p,{children:["That is, for kernels that do not support reporting zone capacity, the zone\ndescriptor data structure type ",(0,s.jsx)(n.code,{children:"struct blk_zone"})," is redefined to include a\ncapacity field."]}),"\n",(0,s.jsxs)(n.p,{children:["With this method, the code that is responsible for issuing and parsing zone\nreports always has access to the ",(0,s.jsx)(n.code,{children:"capacity"})," field of ",(0,s.jsx)(n.code,{children:"struct blk_zone"}),",\nregardless of the kernel version the code is executed on. For kernels before\nkernel version 5.9, the zone capacity field is always equal to 0, which means\nthat the reported zone capacity should be ignored and that the zone size should\nbe used in its place. If your kernel lacks support for this field, you can still\nuse various coding techniques to return a zone capacity that is equal to the\nzone size."]}),"\n",(0,s.jsxs)(n.p,{children:["Again using the source code of the ",(0,s.jsx)(n.a,{href:"/docs/tools/libzbd",children:(0,s.jsx)(n.em,{children:"libzbd"})})," library as an\nexample, the zone descriptors of a zone report reply can be handled as follows."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"/*\n * zbd_parse_zone - Fill a zone descriptor\n */\nstatic inline void zbd_parse_zone(struct zbd_zone *zone, struct blk_zone *blkz,\n                                  struct blk_zone_report *rep)\n{\n        zone->start = blkz->start << SECTOR_SHIFT;\n        zone->len = blkz->len << SECTOR_SHIFT;\n        if (rep->flags & BLK_ZONE_REP_CAPACITY)\n                zone->capacity = blkz->capacity << SECTOR_SHIFT;\n        else\n                zone->capacity = zone->len;\n        zone->wp = blkz->wp << SECTOR_SHIFT;\n\n        zone->type = blkz->type;\n        zone->cond = blkz->cond;\n        zone->flags = 0;\n        if (blkz->reset)\n                zone->flags |= ZBD_ZONE_RWP_RECOMMENDED;\n        if (blkz->non_seq)\n                zone->flags |= ZBD_ZONE_NON_SEQ_RESOURCES;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"As shown in this example, the capacity of a zone is always initialized to the\nsize of the zone when the kernel does not report any value. Doing so, the\ncapacity of a zone is always a valid value, regardless of the kernel version."}),"\n",(0,s.jsxs)(n.p,{children:["The command line utility ",(0,s.jsx)(n.a,{href:"/docs/tools/util-linux#blkzone",children:(0,s.jsx)(n.code,{children:"blkzone"})}),", which\nis part of the ",(0,s.jsx)(n.em,{children:"util-linux"})," project, uses the ",(0,s.jsx)(n.em,{children:"BLKREPORTZONE"})," command to\nimplement its ",(0,s.jsx)(n.em,{children:"report"})," function. Its code was modified similarly to the above\nmethod to ensure its correct compilation and execution regardless of the version\nof the kernel being used."]}),"\n",(0,s.jsx)(n.h3,{id:"resetting-a-zone-write-pointer",children:"Resetting a Zone Write Pointer"}),"\n",(0,s.jsxs)(n.p,{children:["The write pointer of a single sequential zone or of a range of contiguous\nsequential zones can be reset using the ",(0,s.jsx)(n.code,{children:"BLKRESETZONE"})," command. Resetting a\nsequential zone write pointer position will also transition the zone to the\n",(0,s.jsx)(n.em,{children:"Empty"})," condition (",(0,s.jsx)(n.code,{children:"BLK_ZONE_COND_EMPTY"}),")."]}),"\n",(0,s.jsxs)(n.p,{children:["The range of zones targeted for resetting is defined using the data structure\n",(0,s.jsx)(n.code,{children:"blk_zone_range"}),", shown below."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"/**\n * struct blk_zone_range - BLKRESETZONE/BLKOPENZONE/\n *                         BLKCLOSEZONE/BLKFINISHZONE ioctl\n *                         requests\n * @sector: Starting sector of the first zone to operate on.\n * @nr_sectors: Total number of sectors of all zones to operate on.\n */\nstruct blk_zone_range {\n        __u64           sector;\n        __u64           nr_sectors;\n};\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"sector"})," field specifies the start sector of the first zone to reset. The\n",(0,s.jsx)(n.code,{children:"nr_sectors"})," field specifies the total length of the range of zones to reset.\nThis length must be at least as large as one zone."]}),"\n",(0,s.jsxs)(n.p,{children:["As indicated in comments describing the ",(0,s.jsx)(n.code,{children:"blk_zone_range"})," structure, the commands\n",(0,s.jsx)(n.code,{children:"BLKOPENZONE"}),", ",(0,s.jsx)(n.code,{children:"BLKCLOSEZONE"})," and ",(0,s.jsx)(n.code,{children:"BLKFINISHZONE"})," also use this data structure\nto define the range of zones on which the command operates."]}),"\n",(0,s.jsxs)(n.p,{children:["The following code shows an example use of the ",(0,s.jsx)(n.code,{children:"BLKRESETZONE"})," command to reset\na single zone that starts at sector 274726912 and has a zone size of 256 MiB\n(524288 sectors of 512B)."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"#include <sys/ioctl.h>\n#include <linux/blkzoned.h>\n\nstruct blk_zone_range zrange;\nint ret;\n\nzrange.sector = 274726912;\nzrange.nr_sectors = 524288;\n\nret = ioctl(fd, BLKRESETZONE, &zrange);\nif (ret)\n\tgoto error;\n...\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The device file descriptor ",(0,s.jsx)(n.code,{children:"fd"})," must be open for writing in order for this\ncommand to succeed."]}),"\n",(0,s.jsxs)(n.p,{children:["The  command line utility ",(0,s.jsx)(n.a,{href:"/docs/tools/util-linux#blkzone",children:(0,s.jsx)(n.code,{children:"blkzone"})})," uses\nthe ",(0,s.jsx)(n.em,{children:"BLKRESETZONE"})," command to implement its ",(0,s.jsx)(n.em,{children:"reset"})," functionality."]}),"\n",(0,s.jsx)(n.h3,{id:"opening-closing-and-finishing-zones",children:"Opening, Closing and Finishing Zones"}),"\n",(0,s.jsxs)(n.p,{children:["Explicitly opening a zone or a range of zones can be done using the\n",(0,s.jsx)(n.em,{children:"BLKOPENZONE"})," command. This command uses the same arguments as the\n",(0,s.jsx)(n.em,{children:"BLKRESETZONE"})," command. It takes a pointer to a data structure ",(0,s.jsx)(n.code,{children:"blk_zone_range"}),",\nwhich specifies the range of zones to operate on."]}),"\n",(0,s.jsxs)(n.p,{children:["Closing a zone is done using the command ",(0,s.jsx)(n.em,{children:"BLKCLOSEZONE"}),". Finishing a zone--that\nis, transitioning the zone to the ",(0,s.jsx)(n.em,{children:"full"})," condition (",(0,s.jsx)(n.code,{children:"BLK_ZONE_COND_FULL"}),"), is\ndone using the ",(0,s.jsx)(n.em,{children:"BLKFINISHZONE"})," command. Both of these commands also take as\narguments a pointer to the ",(0,s.jsx)(n.code,{children:"blk_zone_range"})," data structure to specify the range\nof zones to operate on."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.em,{children:"BLKOPENZONE"}),", ",(0,s.jsx)(n.em,{children:"BLKCLOSEZONE"})," and ",(0,s.jsx)(n.em,{children:"BLKFINISHZONE"})," commands were introduced\nin kernel version 5.5.0."]}),"\n",(0,s.jsx)(n.h3,{id:"zone-size-and-number-of-zones",children:"Zone Size and Number of Zones"}),"\n",(0,s.jsxs)(n.p,{children:["Linux\xae kernel version 4.20 introduced two new commands: one to obtain a\nzoned device's zone size (",(0,s.jsx)(n.code,{children:"BLKGETZONESZ"}),"), and one to obtain the total number\nof zones of the device (",(0,s.jsx)(n.code,{children:"BLKGETNRZONES"}),"). Both commands take a pointer to an\nunsigned 32-bit integer variable as an argument, and both commands return the\nzone-size value or the number of zones. The following sample C code illustrates\nthe use of these commands."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:'#include <sys/ioctl.h>\n#include <linux/blkzoned.h>\n#include <stdio.h>\n\nunsigned int nr_zones, zone_size;\nint ret;\n\nret = ioctl(fd, ,BLKGETZONESZ, &zone_size);\nif (ret)\n\tgoto error;\nret = ioctl(fd, ,BLKGETNRZONES, &nr_zones);\nif (ret)\n\tgoto error;\n\nprintf("Device has %u zones of %u 512-Bytes sectors\\n",\n       nr_zones, zone_size);\n...\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The command ",(0,s.jsx)(n.code,{children:"BLKGETNRZONES"})," is especially useful for allocating an array of\nzone descriptors large enough for a zone report on all the zones of a device."]})]})}function h(e={}){const{wrapper:n}={...(0,o.M)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},4552:(e,n,t)=>{t.d(n,{I:()=>l,M:()=>r});var s=t(1504);const o={},i=s.createContext(o);function r(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);
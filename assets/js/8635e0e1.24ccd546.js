"use strict";(self.webpackChunkzonedstorage_io=self.webpackChunkzonedstorage_io||[]).push([[1088],{1544:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>d,toc:()=>l});var t=s(7624),i=s(4552);const o={id:"sg3utils",title:"SCSI Generic Utilities",sidebar_label:"SCSI Generic Utilities"},r="SCSI Generic Utilities",d={id:"tools/sg3utils",title:"SCSI Generic Utilities",description:"Various open source projects provide tools that support the direct manipulation",source:"@site/docs/tools/sg3utils.md",sourceDirName:"tools",slug:"/tools/sg3utils",permalink:"/docs/tools/sg3utils",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"sg3utils",title:"SCSI Generic Utilities",sidebar_label:"SCSI Generic Utilities"},sidebar:"docs",previous:{title:"ZNS Tools",permalink:"/docs/tools/zns"},next:{title:"libzbc User Library",permalink:"/docs/tools/libzbc"}},a={},l=[{value:"lsscsi",id:"lsscsi",level:2},{value:"Identifying Host Managed Disks",id:"identifying-host-managed-disks",level:3},{value:"Disks Interface and Transport",id:"disks-interface-and-transport",level:3},{value:"sg3_utils",id:"sg3_utils",level:2},{value:"sg_rep_zone",id:"sg_rep_zone",level:3},{value:"sg_reset_wp",id:"sg_reset_wp",level:3},{value:"sg_zone",id:"sg_zone",level:3}];function c(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.M)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"scsi-generic-utilities",children:"SCSI Generic Utilities"}),"\n",(0,t.jsxs)(n.p,{children:["Various open source projects provide tools that support the direct manipulation\nof SCSI devices. The ",(0,t.jsx)(n.em,{children:"lsscsi"})," command line tool and the ",(0,t.jsx)(n.em,{children:"sg3_utils"})," library and\nutilities collection are among the tools most widely used for SCSI device\nmanipulation. They are available as pre-compiled packages with most Linux\xae\ndistributions."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"lsscsi"})," has the capability to indicate if a device is a ZBC host managed zoned\nblock device. ",(0,t.jsx)(n.em,{children:"sg3_utils"})," added support for ZBC in version 1.42."]}),"\n",(0,t.jsx)(n.h2,{id:"lsscsi",children:"lsscsi"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)("a",{href:"http://sg.danny.cz/scsi/lsscsi.html",target:"_blank",children:(0,t.jsx)(n.em,{children:"lsscsi"})}),"\ncommand lists information about the SCSI devices that are connected to a Linux\nsystem. ",(0,t.jsx)(n.em,{children:"lsscsi"})," is available as a package in most Linux distributions. For\nexample, in ",(0,t.jsx)(n.a,{href:"/docs/distributions/fedora",children:"Fedora\xae"})," Linux, ",(0,t.jsx)(n.em,{children:"lssci"})," can be\ninstalled using the following command:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-plaintext",children:"# dnf install lsscsi\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The name of the package may differ from distribution to distribution. Refer to\nthe documentation of the given distribution to discover the name of the package\nthat provides ",(0,t.jsx)(n.em,{children:"lssci"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"identifying-host-managed-disks",children:"Identifying Host Managed Disks"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"lsscsi"})," lists the disks that are managed using the kernel SCSI subsystem. This\nalways includes SATA disks that are directly connected (1) to a SATA port on\nthe system mainboard or (2) to a SATA PCIe adapter."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-plaintext",children:"# lsscsi\n[2:0:0:0]    disk    ATA      INTEL SSDSC2CT18 335u  /dev/sda\n[4:0:0:0]    zbc     ATA      HGST HSH721414AL T220  /dev/sdb\n[10:0:1:0]   zbc     HGST     HSH721414AL52M0  a220  /dev/sdc\n[10:0:3:0]   zbc     ATA      HGST HSH721415AL T220  /dev/sdd\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The second column of the default output indicates the device type. For host\nmanaged disks, the type name is ",(0,t.jsx)(n.code,{children:"zbc"}),". For regular disks, the type name is\n",(0,t.jsx)(n.code,{children:"disk"}),". Older versions of ",(0,t.jsx)(n.em,{children:"lsscsi"})," may directly list the numerical value of the\ndevice type. In the case of host managed disks, ",(0,t.jsx)(n.code,{children:"0x14"})," is displayed."]}),"\n",(0,t.jsxs)(n.p,{children:["Adding the option ",(0,t.jsx)(n.code,{children:"-g"})," to the ",(0,t.jsx)(n.em,{children:"lssci"})," command returns the SCSI Generic node\nfile path associated with a device. This can be useful in combination with\n",(0,t.jsx)(n.a,{href:"/docs/tools/libzbc",children:"libzbc"})," or any of the ",(0,t.jsx)(n.em,{children:"sg3_utils"})," command line tools."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-plaintext",children:"# lsscsi -g\n[2:0:0:0]    disk    ATA      INTEL SSDSC2CT18 335u  /dev/sda   /dev/sg0\n[4:0:0:0]    zbc     ATA      HGST HSH721414AL T220  /dev/sdb   /dev/sg1\n[10:0:1:0]   zbc     HGST     HSH721414AL52M0  a220  /dev/sdc   /dev/sg2\n[10:0:3:0]   zbc     ATA      HGST HSH721415AL T220  /dev/sdd   /dev/sg3\n\n"})}),"\n",(0,t.jsx)(n.h3,{id:"disks-interface-and-transport",children:"Disks Interface and Transport"}),"\n",(0,t.jsxs)(n.p,{children:["The third column of the output is the disk vendor ID. For ATA disks, this is\nalways ",(0,t.jsx)(n.code,{children:"ATA"})," even for ATA disks connected to a SAS host-bus-adapter (HBA). The\n",(0,t.jsx)(n.em,{children:"transport"})," that is used to communicate with the disk can be more precisely\ndiscovered using the ",(0,t.jsx)(n.code,{children:"-t"})," option."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-plaintext",children:"# lsscsi -t\n[2:0:0:0]    disk    sata:55cd2e4000111f9b           /dev/sda\n[4:0:0:0]    zbc     sata:5000cca25bc03731           /dev/sdb\n[10:0:1:0]   zbc     sas:0x5000cca0000025c5          /dev/sdc\n[10:0:3:0]   zbc     sas:0x300062b200f35d43          /dev/sdd\n"})}),"\n",(0,t.jsx)(n.h2,{id:"sg3_utils",children:"sg3_utils"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)("a",{href:"http://sg.danny.cz/sg/sg3_utils.html",target:"_blank",children:(0,t.jsx)(n.em,{children:"sg3_utils"})})," project provides a library and a collection of\ncommand line tools that directly send SCSI commands to SCSI devices using the\nkernel SCSI generic driver."]}),"\n",(0,t.jsxs)(n.p,{children:["The SCSI generic driver (",(0,t.jsx)(n.em,{children:"sg"})," driver) is enabled by default on most\ndistributions. Use the following command to check whether the ",(0,t.jsx)(n.em,{children:"sg"})," driver\nmodule is loaded:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-plaintext",children:"# cat /proc/modules | grep sg\n"})}),"\n",(0,t.jsxs)(n.p,{children:["If the output of this command is empty, the ",(0,t.jsx)(n.em,{children:"sg"})," driver is loaded:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-plaintext",children:"# modprobe sg\n"})}),"\n",(0,t.jsxs)(n.p,{children:["These commands work only if the ",(0,t.jsx)(n.em,{children:"sg"})," driver was compiled as a loadable kernel\nmodule. If you experience errors (as shown below), use the command (the ",(0,t.jsx)(n.code,{children:"cat"}),"\ncommand after the error message) to verify that the ",(0,t.jsx)(n.em,{children:"sg"})," driver was compiled as\npart of the kernel:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-plaintext",children:"# modprobe sg\nmodinfo: ERROR: Module sg not found.\n\n# cat /lib/modules/`uname -r`/modules.builtin | grep sg\nkernel/drivers/scsi/sg.ko\n"})}),"\n",(0,t.jsx)(n.p,{children:"Because all disks in Linux are exposed as SCSI devices (including all ATA\ndrives), these utilities can be used to manage both (1) SCSI ZBC disks and (2)\nSATA ZAC disks. For cases in which SATA disks are connected to SATA ports (e.g.\nan AHCI adapter), the kernel SCSI subsystem translates SCSI commands to ATA\ncommands."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"sg3_utils"})," includes three command line tools that are specific to ZBC disks:"]}),"\n",(0,t.jsx)("center",{children:(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{style:{textAlign:"center"},children:"Utility Name"}),(0,t.jsx)(n.th,{style:{textAlign:"left"},children:"Main SCSI Command Invoked"}),(0,t.jsx)(n.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{style:{textAlign:"center"},children:(0,t.jsx)(n.strong,{children:"sg_rep_zones"})}),(0,t.jsx)(n.td,{style:{textAlign:"left"},children:"REPORT ZONES"}),(0,t.jsx)(n.td,{style:{textAlign:"left"},children:"Get a ZBC disk zone information"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{style:{textAlign:"center"},children:(0,t.jsx)(n.strong,{children:"sg_reset_wp"})}),(0,t.jsx)(n.td,{style:{textAlign:"left"},children:"RESET WRITE POINTER"}),(0,t.jsx)(n.td,{style:{textAlign:"left"},children:"Reset one or all zones of a ZBC disk"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{style:{textAlign:"center"},children:(0,t.jsx)(n.strong,{children:"sg_zone"})}),(0,t.jsx)(n.td,{style:{textAlign:"left"},children:"CLOSE ZONE, FINISH ZONE, OPEN ZONE"}),(0,t.jsx)(n.td,{style:{textAlign:"left"},children:"Sends one of these commands to the given ZBC device"})]})]})]})}),"\n",(0,t.jsx)(n.admonition,{type:"caution",children:(0,t.jsx)(n.p,{children:'The help output of the commands below uses the term "LBA". In this context,\n"LBA" refers to a 512-byte sector size regardless of the logical and physical\nblock size of the disk.'})}),"\n",(0,t.jsx)(n.h3,{id:"sg_rep_zone",children:"sg_rep_zone"}),"\n",(0,t.jsxs)(n.p,{children:["Running the command ",(0,t.jsx)(n.code,{children:"sg_rep_zone"})," with the ",(0,t.jsx)(n.code,{children:"--help"})," option returns a simple\nusage explanation."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-plaintext",children:"# sg_rep_zones --help\nUsage: sg_rep_zones  [--help] [--hex] [--maxlen=LEN] [--partial]\n                     [--raw] [--readonly] [--report=OPT] [--start=LBA]\n                     [--verbose] [--version] DEVICE\n  where:\n    --help|-h          print out usage message\n    --hex|-H           output response in hexadecimal; used twice\n                       shows decoded values in hex\n    --maxlen=LEN|-m LEN    max response length (allocation length in cdb)\n                           (def: 0 -> 8192 bytes)\n    --partial|-p       sets PARTIAL bit in cdb\n    --raw|-r           output response in binary\n    --readonly|-R      open DEVICE read-only (def: read-write)\n    --report=OPT|-o OP    reporting options (def: 0: all zones)\n    --start=LBA|-s LBA    report zones from the LBA (def: 0)\n                          need not be a zone starting LBA\n    --verbose|-v       increase verbosity\n    --version|-V       print version string and exit\n\nPerforms a SCSI REPORT ZONES command.\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Below is an example of the ",(0,t.jsx)(n.code,{children:"sg_rep_zone"})," utility output:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-plaintext",children:"# sg_rep_zone /dev/sdd\nReport zones response:\n  Same=1: zone type and length same in each descriptor\n\n  Maximum LBA: 0xda47ffff\n Zone descriptor: 0\n   Zone type: Conventional\n   Zone condition: Not write pointer\n   Non_seq: 0\n   Reset: 0\n   Zone Length: 0x10000\n   Zone start LBA: 0x0\n   Write pointer LBA: 0xffffffffffff\n Zone descriptor: 1\n   Zone type: Conventional\n   Zone condition: Not write pointer\n   Non_seq: 0\n   Reset: 0\n   Zone Length: 0x10000\n   Zone start LBA: 0x10000\n   Write pointer LBA: 0xffffffffffff\n Zone descriptor: 2\n   Zone type: Conventional\n   Zone condition: Not write pointer\n   Non_seq: 0\n   Reset: 0\n   Zone Length: 0x10000\n   Zone start LBA: 0x20000\n   Write pointer LBA: 0xffffffffffff\n ...\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsx)(n.p,{children:"Either (1) the block device file path or (2) the device SCSI Generic node file\npath can be used to specify a disk."})}),"\n",(0,t.jsxs)(n.p,{children:["It is possible to start a zone report at a specific zone by using the\n",(0,t.jsx)(n.code,{children:"--start"})," option. For example, to obtain the zone information starting at the\nfirst sequential zone of the disk (LBA 34340864), use the following command:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-plaintext",children:"# sg_rep_zones --start=34340864 /dev/sdd\nReport zones response:\n  Same=1: zone type and length same in each descriptor\n\n  Maximum LBA: 0xda47ffff\n Zone descriptor: 0\n   Zone type: Sequential write required\n   Zone condition: Empty\n   Non_seq: 0\n   Reset: 0\n   Zone Length: 0x10000\n   Zone start LBA: 0x20c0000\n   Write pointer LBA: 0x20c0000\n Zone descriptor: 1\n   Zone type: Sequential write required\n   Zone condition: Empty\n   Non_seq: 0\n   Reset: 0\n   Zone Length: 0x10000\n   Zone start LBA: 0x20d0000\n   Write pointer LBA: 0x20d0000\n ...\n"})}),"\n",(0,t.jsx)(n.h3,{id:"sg_reset_wp",children:"sg_reset_wp"}),"\n",(0,t.jsxs)(n.p,{children:["Running the command ",(0,t.jsx)(n.code,{children:"sg_reset_wp"})," with the ",(0,t.jsx)(n.code,{children:"--help"})," option returns a simple\nusage explanation:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-plaintext",children:"# sg_reset_wp --help\nUsage: sg_reset_wp  [--all] [--help] [--verbose] [--version]\n                    [--zone=ID] DEVICE\n  where:\n    --all|-a           sets the ALL flag in the cdb\n    --help|-h          print out usage message\n    --verbose|-v       increase verbosity\n    --version|-V       print version string and exit\n\n    --zone=ID|-z ID    ID is the starting LBA of the zone whose\n                       write pointer is to be reset\nPerforms a SCSI RESET WRITE POINTER command. ID is decimal by default,\nfor hex use a leading '0x' or a trailing 'h'. Either the --zone=ID\nor --all option needs to be given.\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Reset all sequential write zones on the disk by using the ",(0,t.jsx)(n.code,{children:"--all"})," option:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-plaintext",children:"# sg_reset_wp --all /dev/sdd\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Reset a single sequential zone write pointer by using the ",(0,t.jsx)(n.code,{children:"--zone"})," option:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-plaintext",children:"# sg_reset_wp --zone=34340864 /dev/sdd\n"})}),"\n",(0,t.jsx)(n.p,{children:"Specifying the zone ID (zone start LBA) of a conventional zone results in\nan error:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-plaintext",children:"# sg_reset_wp --zone=0 /dev/sdd\nReset write pointer command: Illegal request\n"})}),"\n",(0,t.jsx)(n.p,{children:"Reseting the write pointer of an empty sequential write zone has no effect\nand does not result in an error."}),"\n",(0,t.jsx)(n.h3,{id:"sg_zone",children:"sg_zone"}),"\n",(0,t.jsxs)(n.p,{children:["Running the command ",(0,t.jsx)(n.code,{children:"sg_zone"})," with the ",(0,t.jsx)(n.code,{children:"--help"})," option returns a simple usage\nexplanation:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-plaintext",children:"# sg_zone --help\nUsage: sg_zone  [--all] [--close] [--finish] [--help] [--open]\n                [--verbose] [--version] [--zone=ID] DEVICE\n  where:\n    --all|-a           sets the ALL flag in the cdb\n    --close|-c         issue CLOSE ZONE command\n    --finish|-f        issue FINISH ZONE command\n    --help|-h          print out usage message\n    --open|-o          issue OPEN ZONE command\n    --verbose|-v       increase verbosity\n    --version|-V       print version string and exit\n    --zone=ID|-z ID    ID is the starting LBA of the zone\n\n*sg_zone* can perform OPEN ZONE, CLOSE ZONE or FINISH ZONE SCSI commands. ID is\ndecimal by default. To enter a hexadecimal value, use a leading '0x' or a\ntrailing 'h'. One of the following options must be provided: (1) `--close`, (2)\n`--finish`, or (3) `--open`.\n\nThere is no `--reset` option. Such an option would duplicate the function of\nthe *sg_reset_wp* utility.\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The following example shows a sequence of commands that illustrate the effects\nthat the ",(0,t.jsx)(n.em,{children:"sg_zone"})," and ",(0,t.jsx)(n.em,{children:"sg_reset_wp"})," commands have on the condition of a zone,\nas reported with ",(0,t.jsx)(n.em,{children:"sg_rep_zone"}),'. At the beginning of this sequence of commands,\nthe sequential zone on the disk is explicitly opened from an empty condition.\nThen the zone is transitioned to a full condition by using the "zone finish"\ncommand. Finally, the zone is again reset to an empty condition.']}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-plaintext",children:"# sg_rep_zones --start=34340864 /dev/sdd\nReport zones response:\n  Same=1: zone type and length same in each descriptor\n\n  Maximum LBA: 0xda47ffff\n Zone descriptor: 0\n   Zone type: Sequential write required\n   Zone condition: Empty\n   Non_seq: 0\n   Reset: 0\n   Zone Length: 0x10000\n   Zone start LBA: 0x20c0000\n   Write pointer LBA: 0x20c0000\n ...\n# sg_zone --open --zone=34340864 /dev/sdd\n# sg_rep_zones --start=34340864 /dev/sdd\nReport zones response:\n  Same=1: zone type and length same in each descriptor\n\n  Maximum LBA: 0xda47ffff\n Zone descriptor: 0\n   Zone type: Sequential write required\n   Zone condition: Explicitly opened\n   Non_seq: 0\n   Reset: 0\n   Zone Length: 0x10000\n   Zone start LBA: 0x20c0000\n   Write pointer LBA: 0x20c0000\n ...\n# sg_zone --finish --zone=34340864 /dev/sdd\n# sg_rep_zones --start=34340864 /dev/sdd\nReport zones response:\n  Same=1: zone type and length same in each descriptor\n\n  Maximum LBA: 0xda47ffff\n Zone descriptor: 0\n   Zone type: Sequential write required\n   Zone condition: Full\n   Non_seq: 0\n   Reset: 0\n   Zone Length: 0x10000\n   Zone start LBA: 0x20c0000\n   Write pointer LBA: 0xffffffffffff\n ...\n# sg_reset_wp --zone=34340864 /dev/sdd\n# sg_rep_zones --start=34340864 /dev/sdd\nReport zones response:\n  Same=1: zone type and length same in each descriptor\n\n  Maximum LBA: 0xda47ffff\n Zone descriptor: 0\n   Zone type: Sequential write required\n   Zone condition: Empty\n   Non_seq: 0\n   Reset: 0\n   Zone Length: 0x10000\n   Zone start LBA: 0x20c0000\n   Write pointer LBA: 0x20c0000\n ...\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.M)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},4552:(e,n,s)=>{s.d(n,{I:()=>d,M:()=>r});var t=s(1504);const i={},o=t.createContext(i);function r(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);
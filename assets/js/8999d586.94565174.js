"use strict";(self.webpackChunkzonedstorage_io=self.webpackChunkzonedstorage_io||[]).push([[8183],{1964:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"filesystems/f2fs","title":"F2FS","description":"The Flash-Friendly File System (F2FS) was designed on the basis of a","source":"@site/docs/filesystems/f2fs.md","sourceDirName":"filesystems","slug":"/filesystems/f2fs","permalink":"/docs/filesystems/f2fs","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"f2fs","title":"F2FS","sidebar_label":"F2FS"},"sidebar":"docs","previous":{"title":"BTRFS","permalink":"/docs/filesystems/btrfs"},"next":{"title":"zonefs","permalink":"/docs/filesystems/zonefs"}}');var i=o(4848),t=o(8453);const a={id:"f2fs",title:"F2FS",sidebar_label:"F2FS"},r="F2FS File System",l={},c=[{value:"Usage",id:"usage",level:2},{value:"Zoned Block Device with Conventional Zones",id:"zoned-block-device-with-conventional-zones",level:3},{value:"Other Zoned Block Devices",id:"other-zoned-block-devices",level:3},{value:"Implementation",id:"implementation",level:2},{value:"Zoned Block Device Support",id:"zoned-block-device-support",level:3},{value:"Zone Capacity Support",id:"zone-capacity-support",level:3},{value:"Limitations",id:"limitations",level:3}];function d(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"f2fs-file-system",children:"F2FS File System"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.em,{children:"Flash-Friendly File System"})," (",(0,i.jsx)(n.em,{children:"F2FS"}),') was designed on the basis of a\nlog-structured file system approach, but was modified to avoid the classical\nproblems of the traditional log-structured approach (e.g. the snowball effect\nof "wandering trees" and the high "cleaning overhead").']}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"F2FS"})," supports various parameters not only for configuring on-disk layout but\nalso for selecting allocation and cleaning algorithms."]}),"\n",(0,i.jsx)(n.admonition,{title:"System Requirements",type:"info",children:(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Linux kernel: 5.12+ (for SMR hard-disks) or 5.16+ (for NVMe ZNS SSDs)."}),"\n",(0,i.jsx)(n.li,{children:"f2fs-tools: 1.12+ (for SMR hard-disks) or 1.14+ (for NVMe ZNS SSDs)."}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.a,{href:"/docs/linux/sched#block-io-scheduler-configuration",children:"mq-deadline"})," block",(0,i.jsx)(n.br,{}),"\n","I/O scheduler for kernel versions prior to 6.10."]}),"\n"]})}),"\n",(0,i.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,i.jsxs)(n.p,{children:["Formatting a zoned block device with ",(0,i.jsx)(n.em,{children:"F2FS"})," requires a randomly\nwriteable storage space for metadata. This is the case for a zoned block device\nthat has conventional zones at the start of its address space. For zoned block\ndevices lacking conventional zones, an additional conventional block device is\nrequired."]}),"\n",(0,i.jsx)(n.admonition,{title:"Device Capacity Limitation",type:"note",children:(0,i.jsx)(n.p,{children:"F2FS does not support device capacities larger than 16 TiB. This makes this file\nsystem inadequate for large capacity SMR hard-disks."})}),"\n",(0,i.jsx)(n.h3,{id:"zoned-block-device-with-conventional-zones",children:"Zoned Block Device with Conventional Zones"}),"\n",(0,i.jsxs)(n.p,{children:["To format a zoned block device that has conventional zones for use with ",(0,i.jsx)(n.em,{children:"F2FS"}),",\nthe command ",(0,i.jsx)(n.code,{children:"mkfs.f2fs"})," is used together with the option ",(0,i.jsx)(n.code,{children:"-m"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-plaintext",children:'# mkfs.f2fs -m /dev/sdb\n\n\tf2fs-tools: mkfs.f2fs Ver: 1.12.0 (2018-11-12)\n\nInfo: Disable heap-based policy\nInfo: Debug level = 0\nInfo: Trim is enabled\nInfo: [/dev/sdb] Disk Model: HGST HSH721415AL\nInfo: Host-managed zoned block device:\n      55880 zones, 524 randomly writeable zones\n      65536 blocks per zone\nInfo: Segments per section = 128\nInfo: Sections per zone = 1\nInfo: sector size = 4096\nInfo: total sectors = 3662151680 (14305280 MB)\nInfo: zone aligned segment0 blkaddr: 65536\nInfo: format version with\n  "Linux version 5.0.16-300.fc30.x86_64 (mockbuild@bkernel03.phx2.fedoraproject.org) (gcc version 9.1.1 20190503 (Red Hat 9.1.1-1) (GCC)) #1 SMP Tue May 14 19:33:09 UTC 2019"\nInfo: [/dev/sdb] Discarding device\nInfo: Discarded 14305280 MB\nInfo: Overprovision ratio = 0.600%\nInfo: Overprovision segments = 86254 (GC reserved = 43690)\nInfo: format successful\n'})}),"\n",(0,i.jsx)(n.p,{children:"The formatted zoned block device can now be directly mounted. No further\nsetup is necessary:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-plaintext",children:"# mount /dev/sdb /mnt\n"})}),"\n",(0,i.jsx)(n.h3,{id:"other-zoned-block-devices",children:"Other Zoned Block Devices"}),"\n",(0,i.jsxs)(n.p,{children:["If the zoned block device does not have conventional zones, then a regular\nblock device can be used for ",(0,i.jsx)(n.em,{children:"F2FS"})," metadata. It is formatted by using the ",(0,i.jsx)(n.em,{children:"-c"}),"\noption of ",(0,i.jsx)(n.code,{children:"mkfs.f2fs"})," as shown in the following example."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-plaintext",children:"# mkfs.f2fs -f -m -c /dev/nvme1n1 /dev/nvme0n1\n\n        F2FS-tools: mkfs.f2fs Ver: 1.14.0 (2021-06-23)\n\nInfo: Disable heap-based policy\nInfo: Debug level = 0\nInfo: Trim is enabled\nInfo: Host-managed zoned block device:\n      2048 zones, 0 randomly writeable zones\n      524288 blocks per zone\nInfo: Segments per section = 1024\nInfo: Sections per zone = 1\nInfo: sector size = 4096\nInfo: total sectors = 1107296256 (4325376 MB)\nInfo: zone aligned segment0 blkaddr: 524288\nInfo: format version with\n  \"Linux version 5.13.0-rc6+ (user1@brahmaputra) (gcc (Ubuntu 10.3.0-1ubuntu1) 10.3.0, GNU ld (GNU Binutils for Ubuntu) 2.36.1) #2 SMP Fri Jun 18 16:45:29 IST 2021\"\nInfo: [/dev/nvme0n1] Discarding device\nInfo: This device doesn't support BLKSECDISCARD\nInfo: This device doesn't support BLKDISCARD\nInfo: [/dev/nvme1n1] Discarding device\nInfo: Discarded 4194304 MB\nInfo: Overprovision ratio = 3.090%\nInfo: Overprovision segments = 74918 (GC reserved = 40216)\nInfo: format successful\n"})}),"\n",(0,i.jsxs)(n.p,{children:["In the above command, ",(0,i.jsx)(n.code,{children:"/dev/nvme1n1"})," is the block device file of the zoned\nnamespace that will be used for the ",(0,i.jsx)(n.em,{children:"F2FS"})," volume, and ",(0,i.jsx)(n.code,{children:"/dev/nvme0n1"}),"is the\nnamespace used for the ",(0,i.jsx)(n.em,{children:"F2FS"})," metadata."]}),"\n",(0,i.jsx)(n.p,{children:"To mount the volume formatted with the above command, the regular block device\nmust be specified:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-plaintext",children:"# mount -t f2fs /dev/nvme0n1 /mnt/f2fs/\n"})}),"\n",(0,i.jsx)(n.h2,{id:"implementation",children:"Implementation"}),"\n",(0,i.jsx)(n.h3,{id:"zoned-block-device-support",children:"Zoned Block Device Support"}),"\n",(0,i.jsxs)(n.p,{children:["Zoned block device support was added to ",(0,i.jsx)(n.em,{children:"F2FS"})," with kernel 4.10. Because ",(0,i.jsx)(n.em,{children:"F2FS"}),"\nuses a metadata-block on-disk format with fixed-block location, only zoned\nblock devices that include conventional zones are supported. Zoned devices\ncomposed entirely of sequential zones cannot be used with ",(0,i.jsx)(n.em,{children:"F2FS"})," as a\nstandalone device and they require a multi-device setup in order to place\nmetadata blocks on randomly writable storage. ",(0,i.jsx)(n.em,{children:"F2FS"})," supports multi-device\nsetup where multiple block device address spaces are linearly concatenated to\nform a logically larger block device. The\n",(0,i.jsx)(n.a,{href:"/docs/device-mapper/dm-linear",children:(0,i.jsx)(n.em,{children:"dm-linear"})})," device mapper target can also be\nused to create a logical device that is composed of both conventional zones and\nsequential zones suitable for ",(0,i.jsx)(n.em,{children:"F2FS"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"F2FS"})," zoned block device support was achieved using the following principles."]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Section Alignment"})," In ",(0,i.jsx)(n.em,{children:"F2FS"}),", a section is a group of fixed-size\nsegments (2 MB). The number of segments in a section is determined to match\nthe zoned device zone size. For example: with a 256 MB zone size, a section\ncontains 128 segments of 2MB."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Forced LFS mode"})," By default, ",(0,i.jsx)(n.em,{children:"F2FS"})," tries to optimize block allocation\n(in order to avoid excessive append write) by allowing some random writes\nwithin segments. The LFS mode forces sequential writes to segments and\nforces the sequential use of segments within sections, which results in\nfull compliance with the zoned block device's write constraint."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Zone reset as discard operation"})," In the past, block ",(0,i.jsx)(n.em,{children:"discard"})," (or ",(0,i.jsx)(n.em,{children:"trim"}),')\nindicated to a device that a block or range of blocks are no longer in use.\nThis has been replaced with the execution of a "zone write pointer reset"\ncommand when all blocks of all segments of a section are free. This allows\nthe section to be reused.']}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Compared to a solution that uses the ",(0,i.jsx)(n.em,{children:"dm-zoned"})," device mapper target,\nthe performance of ",(0,i.jsx)(n.em,{children:"F2FS"}),' on zoned devices does not suffer from "zone reclaim\noverhead", because writes are always sequential and do not require on-disk\ntemporary buffering. ',(0,i.jsx)(n.em,{children:"F2FS"})," garbage collection (segment cleanup) generates\noverhead only for workloads that frequently delete files or modify files' data."]}),"\n",(0,i.jsx)(n.h3,{id:"zone-capacity-support",children:"Zone Capacity Support"}),"\n",(0,i.jsxs)(n.p,{children:["SSDs with Zoned Namespace support can have a per ",(0,i.jsx)(n.a,{href:"/docs/introduction/zns#zone-capacity-and-zone-size",children:"zone capacity that is smaller\nthan the zone size"}),". To\nsupport such devices, ",(0,i.jsx)(n.em,{children:"F2FS"})," ensures that block allocation and accounting\nconsiders only the blocks in a zone that are within the zone's capacity. This\nsupport for zone capacity has been available since it was introduced in Linux\nkernel version 5.10."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"F2FS"})," volumes need some storage space that is randomly writable in order\nto store and update in-place metadata blocks for the volume. Since NVMe zoned\nnamespaces do not have conventional zones, a ",(0,i.jsx)(n.em,{children:"F2FS"})," volume cannot be\nself-contained within a single NVMe zoned namespace. To format an ",(0,i.jsx)(n.em,{children:"F2FS"})," volume\nusing a NVMe zoned namespace, a multi-device volume format must be used in order\nto provide an additional regular block device to store the volume metadata\nblocks. This additional regular block device can be either a regular namespace\non the same NVMe device or a regular namespace on another NVMe device."]}),"\n",(0,i.jsx)(n.h3,{id:"limitations",children:"Limitations"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"F2FS"})," uses 32-bit block numbers with a block size of 4 KB. This results in a\nmaximum volume size of 16 TB. Any device or combination of devices (for a\nmulti-device volume) with a total capacity that is larger than 16 TB cannot\nbe used with ",(0,i.jsx)(n.em,{children:"F2FS"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["To overcome this limit, the ",(0,i.jsx)(n.a,{href:"/docs/device-mapper/dm-linear",children:(0,i.jsx)(n.em,{children:"dm-linear"})})," device\nmapper target can be used to partition a zoned block device into serviceable,\nsmaller logical devices. This configuration must ensure that each logical device\nthat is created is assigned a sufficient amount of conventional zones to store\n",(0,i.jsx)(n.em,{children:"F2FS"})," fixed location metadata blocks."]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>a,x:()=>r});var s=o(6540);const i={},t=s.createContext(i);function a(e){const n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);